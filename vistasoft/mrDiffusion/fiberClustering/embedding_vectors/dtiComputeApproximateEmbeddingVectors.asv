function [E]=dtiComputeApproximateEmbeddingVectors(fgfile, NfibersInA, npoints, kernelsigma, nvec, method) 

%Computes embedded coordinates on a large fiberset
%Parameters: full fiber set (fgfile)
% NSamples: how many fibers form the "A" marix (full affinity matrix).
% Recommended: 15%
%npoints (nodes in a resampled fiber)
%Note that your sample for A matrix will be picked from the first
%NfibersInA fibers. I is therefore crucial that the original fiberset is
%reshuffled using  fg = ShuffleFibers(fg) before it is passed into this
%function. 


%Kernel is a parameter used for gaussian transformation from distances to
%affinities  (sigma of affinity=-distance^2/sigmasquare)

%ER 03/2008

load(fgfile); 
NoFibersTotal=size(fg.fibers, 1); 

%Compute distances for A. Compute distances for B. 
range1start=1; range2start=1; range1end=NfibersInA; range2end=NoFibersTotal;


compute_interfiber_distances(fgfile, npoints, method, range1start, range1end, range2start,  range2end);
%This will save some intermediate results on disk. 

outfile=[fgfile 'dist' num2str(range1start) 'to' num2str(range1end) 'vs' num2str(range2start) 'to' num2str(range2end) method];

%Transform distances into proximities. Use kernel sigma=30; That makes sigmasquare=900.
load(outfile); 

if (strcmp(method,'frenet'))

    
    for i=1:size(distmsr(:));
    distmsr(i)=log(distmsr(i));
    end

    distmsr(distmsr<-3)=-3; %rescale so that zero is the smalles distance
    distmsr= distmsr+3;
    distmsr(isinf(distmsr))=0;
end

%figure; hist(distmsr(:));
%kernelsigma=mean(distmsr(:))    ;

distmsr(1:NfibersInA, 1:NfibersInA)=(distmsr(1:NfibersInA, 1:NfibersInA)'+distmsr(1:NfibersInA, 1:NfibersInA))./2;
%just to fix assymmetry which shldnt be there  btw. 

affinities=dtiComputeAffinitiesFromDistances(distmsr, kernelsigma);	clear distmsr; 
clear fibergroup1 fibergroup2

%figure; hist(affinities(:));

%Perform estimation such that the size of B matrix is 5xSizeOfA which makes
%A about 20%

NSamples=min((NoFibersTotal-NfibersInA), NfibersInA*4);

A=affinities(1:NfibersInA, 1:NfibersInA);
B=affinities(1:NfibersInA, NfibersInA+(1:NSamples));
clear affinities;

%Compute embedding vectors; 
[E, embbasis]=dtiApproximateEmbeddingVectors(A, B, nvec);
display('Embedded space basis computed'); 

clear B;


maxlast=NfibersInA+NSamples; 

while maxlast<NoFibersTotal

display(['Embedding fibers ' num2str(maxlast+1) ' to' num2str(min(maxlast+NSamples, NoFibersTotal))]);  

load(outfile); 
affinities=dtiComputeAffinitiesFromDistances(distmsr, kernelsigma);	clear distmsr; 
clear fibergroup1 fibergroup2
S=affinities(1:NfibersInA, (maxlast+1):min(maxlast+NSamples, NoFibersTotal));
clear affinities;

E=[E; dtiNewDataOntoEmbeddingVectors(A, S, embbasis, nvec)];
maxlast=maxlast+NSamples;
end



%The next step will be computing actual clustering which we will put into a
%different function in case we wanted to stop here and use current embedded
%vectors for atlas creation purposes. 


save([fgfile 'EV' method], 'A', 'E', 'embbasis', 'npoints', 'kernelsigma', 'method');
