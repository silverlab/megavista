
function ecogBatch(block)
%
% Usage:
% ecogBatch('ST03_bl76');
%
% This batch function will call makeparSubj02miniKM.m to generate a
% parameter file for the desired block, parSubj02miniKM.mat, and store
% it in the rawData/block directory
%
% j.chen

% block = 'ST03_bl16';
% block = 'ST03_bl19';
% block = 'ST03_bl34';
% block = 'ST03_bl35';
% block = 'ST03_bl76';

%% Paths

scriptspath = '/Volumes/kanile/wagner/ecog/scripts/';
addpath(genpath(scriptspath));
basepath = '/Volumes/kanile/wagner/ecog/subj02/ecog/miniKM';
addpath(basepath);
parfile = fullfile(basepath,'RawData',block,'parSubj02miniKM.mat'); % generated by globalsSubj02miniKM.m

%% Create/load parameters

if exist(parfile,'file')
    load(parfile);
else
    % If you wish to create a new parfile, run this line outside the batch
    par = makeparSubj02miniKM(block,basepath,parfile);
end

% Remove missing channels from electrode list
elecs = [1:par.nchan];
if isfield(par,'missingchan')
    elecs=elecs(~ismember(elecs,par.missingchan));
end

%% Filter 60 Hz line noise
% ecogNoiseFiltData(par,elecs);

%% re-referencing data to the common average reference CAR
% ecogCommonAvgRef(par,'noiseFilt',elecs) % 'orig'

%% Remove bad and epileptic channels from remaining analyses
elecs=elecs(~ismember(elecs,par.badchan));
elecs=elecs(~ismember(elecs,par.epichan));

%% Decompose signal into Amplitude and Phase for different frequencies
% ecogDataDecompose(par,elecs);

% Assign timestamps
stampspath = fullfile(par.BehavData,['pdioevents_' par.block '.mat']);
if exist(stampspath,'file')
    load(stampspath);
else
    [truestamps,conds,firstEvent] = ecogStampfunc(par.RawData,par.BehavData,par.pdiochan,...
        par.ieegrate,par.pdiorate,par.eventfile);
    save(stampspath,'truestamps','firstEvent','conds');
end

if 0
%% Loop over conditions
% Full trial conditions

bef_win = 0.1; % % windurstr: 5p1 (5.1 seconds)
aft_win = 5.0;

% condstoprocess and condnames must be index-aligned and the same length!
% condstoprocess = [1 11 21 31 41];
% condnames = {'first','base','rep','half','new'};
condstoprocess = [11 21 31 41];
condnames = {'base','rep','half','new'};

condstamps = []; MXnumEvents = [];
for n = 1:length(condstoprocess);
    mycond = condstoprocess(n);
    condstamps{n} = truestamps(find(conds==mycond));
    MXnumEvents(n) = length(condstamps{n});
end

% Generating ERSP
ecogERSP(par,bef_win,aft_win,condstamps,condnames,elecs);

% Surrogate data for ERSP
surr_iter = 1000; % should be bigger than 2 iterations
ecogSurrogateERSP(par,bef_win,aft_win,condnames,MXnumEvents,surr_iter,elecs);

% Normalizing ERSP with respect to surrogate data
for n = 1:length(condstoprocess);
    mycond = condnames{n};
    ecogNormERSP(par,bef_win,aft_win,mycond,elecs);
end
end
%% Loop over conditions
% Individual object conditions
% to cut down on the number of surrogate data sets generated, use the same
% set for each subgroup. this is acceptable because the number of events is
% the same within each subgroup.

bef_win = 0.1; % windurstr: 1p2 (1.2 seconds)
aft_win = 1.1;

for subgroup = 1:1

    % condstoprocess and condnames must be index-aligned and the same length!
    switch subgroup
        case 1 % first
            condstoprocess = [1 2 3 4];
            condnames = {'c01','c02','c03','c04'};
            %   surr_tag is an optional arg that will load specified surrogate
            %   data instead of default tag
            surr_tag = 'c01';
        case 2 % base
            condstoprocess = [11 12 13 14];
            condnames = {'c11','c12','c13','c14'};
            surr_tag = 'c11';
        case 3 % rep
            condstoprocess = [21 22 23 24];
            condnames = {'c21','c22','c23','c24'};
            surr_tag = 'c21';
        case 4 % half
            condstoprocess = [31 32 33 34];
            condnames = {'c31','c32','c33','c34'};
            surr_tag = 'c31';
        case 5 % new
            condstoprocess = [41 42 43 44];
            condnames = {'c41','c42','c43','c44'};
            surr_tag = 'c41';
    end

    condstamps = []; MXnumEvents = [];
    for n = 1:length(condstoprocess);
        mycond = condstoprocess(n);
        condstamps{n} = truestamps(find(conds==mycond));
        MXnumEvents(n) = length(condstamps{n});
    end

    % Generating ERSP
%     ecogERSP(par,bef_win,aft_win,condstamps,condnames,elecs);

    % Surrogate data for ERSP
    surr_iter = 1000; % should be bigger than 2 iterations
    ecogSurrogateERSP(par,bef_win,aft_win,condnames{1},MXnumEvents(1),surr_iter,elecs);

    for n = 1:length(condstoprocess);
        mycond = condnames{n};
        ecogNormERSP(par,bef_win,aft_win,mycond,elecs,surr_tag);
    end

end



%% plotting normalized ERSP
%plot_erp(globalVar,bef_win,aft_win,elecs,tag,2);
% ecogPlotERSP(par,bef_win,aft_win,elecs,condnames{mycond})






