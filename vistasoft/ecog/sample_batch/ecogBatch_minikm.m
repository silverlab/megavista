
function ecogBatch(subjnum,block,flags)
%
% Usage:
% ecogBatch('ST03_bl76');
%
% This batch function will call makeparSubj02miniKM.m to generate a
% parameter file for the desired block, parSubj02miniKM.mat, and store
% it in the RawData/block directory
%
% Before running this, create basepath/RawData and put your blocks of raw
% files there. E.g., 
% basepath/RawData/ST03_bl16
% basepath/RawData/ST03_bl18
% etc.
%
% In order to assign timestamps you'll need to create event files. These
% should be text files with 2 columns: the onset times for each event (you must
% include every photodiode trigger event) in column 1 and the corresponding
% condition code (integer) in column 2. Make one file for each block. Put
% the files in basepath/BehavData
%
% flags:
% p: Create parfile, otherwise load existing parfile.
% f: Filter (ecogNoiseFiltData)
% a: Artifact replacement (ecogArtReplace)
% c: Common average reference (ecogCommonAvgRef)
% d: Calculate amplitude & phase (ecogDataDecompose)
% t: Set timestamps (ecogStampfunc)
% e: Make ERPs (ecogERP)
% s: Make ERSPs (ecogERSP)
%
% j.chen 07/18/10
% 

%% Paths

basepath = ['/Users/kanile/biac2/ecog/subj' subjnum '/ecog/miniKM'];
addpath(basepath);
parfile = fullfile(basepath,'RawData',block,['parSubj' subjnum 'miniKM.mat']); % generated by makeparSubj02miniKM.m
if exist(parfile,'file')
    load(parfile)
end

%% Create parameters
if ismember('p',flags)
    % Create a new parfile
    % par = makeparSubj07miniKM(block,basepath,parfile);
    funcname = ['makeparSubj' subjnum 'miniKM'];
    cmd = ['par = ' funcname '(block,basepath,parfile)'];
    eval(cmd);
end

% Remove missing channels from electrode list
elecs = [1:par.nchan];
if isfield(par,'missingchan')
    elecs=elecs(~ismember(elecs,par.missingchan));
end

% The reference, epileptic and "bad" channels should never be included in
% the CAR. They are removed within ecogCommonAvgRef. However, we do want to 
% subtract the CAR from everything BUT the reference, so they are still included
% in elecs when we pass it to ecogNoiseFiltData and ecogCommonAvgRef.

%% Filter 60 Hz line noise
if ismember('f',flags')
    ecogNoiseFiltData(par,elecs);
end

%% Artifact detection/replacement
if ismember('a',flags)
    % outMat = ecogArtReplace(par,elecs,doreplace,threshstd,rejectwins)
    outMat = ecogArtReplace(par,elecs,1,5,0,0);
end

%% re-referencing data to the common average reference CAR
if ismember('c',flags)
    ecogCommonAvgRef(par,'artRep',elecs) % 'orig','noiseFilt','artRep'
end

%% Remove bad and epileptic channels from remaining analyses
elecs=elecs(~ismember(elecs,par.badchan));
elecs=elecs(~ismember(elecs,par.epichan));

%% Decompose signal into Amplitude and Phase for different frequencies
if ismember('d',flags)
    ecogDataDecompose(par,elecs);
end

%% Assign timestamps
stampspath = fullfile(par.BehavData,['pdioevents_' par.block '.mat']);
if ismember('t',flags)
    [truestamps,conds,firstEvent] = ecogStampfunc(par.RawData,par.BehavData,par.pdiochan,...
        par.ieegrate,par.pdiorate,par.eventfile);
    save(stampspath,'truestamps','firstEvent','conds');
end

%% Loop over conditions
if ismember('e',flags) || ismember('s',flags)
    load(stampspath);
    
    bef_win = 0.1;
    aft_win = 1.1;
    condnames = {'base2','base3','base4','rep2','rep3','rep4','half2','half3','half4','new2','new3','new4'};
    condstoprocess = [12 13 14 22 23 24 32 33 34 42 43 44]; % these codes correspond to condnames in pdioevents
    condnames{end+1} = 'q2obj1';
    q2obj1conds = [11 21 31 41]; % collapse across all quartet 2, first objs
    
    condstamps = []; MXnumEvents = [];
    for n = 1:length(condstoprocess);
        mycond = condstoprocess(n);
        condstamps{n} = truestamps(conds==mycond);
        MXnumEvents(n) = length(condstamps{n});
    end
    
    temp = [];
    for q = 1:length(q2obj1conds)
        mycond = q2obj1conds(q);
        temp = [temp; truestamps(conds==mycond)];
    end
    MXnumEvents(n+1) = length(temp);
    condstamps{n+1} = sort(temp);
    
end

%% Generating ERP
if ismember('e',flags)
    poststimbase = 0;
    ecogERP(par,bef_win,aft_win,condstamps,condnames,elecs,poststimbase);
end

%% Generating ERSP
if ismember('s',flags)
    ecogERSP(par,bef_win,aft_win,condstamps,condnames,elecs);
end










